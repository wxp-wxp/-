/********************金逸晨**************************
*****************GM12864-02A   SPI LCD FOR STM32*************
*****STM32F103C8T6驱动**************************  
***** BY:GU 
*********ST7567
本模块自带字库型号：金逸晨定制字库V1.0  字库存储为水平扫描方式从上到下，不足一字节补足

12864模块，由于其数据8位为一个显示基本单位，推荐建立128*64/8显存，
以整屏数据刷新的方式杜绝显示过程中的覆盖现象

通过cs选择屏，CS2选择字库
本模块自带背光限流电阻，使用BL 引脚调整背光亮度，推荐使用pwm信号控制亮度，也可直接高电平

********************************************************/
#include "main.h"
//#define LCD_DIS_CHINA_ROT  180	//选择屏幕旋转参数，不旋转0，，旋转180度：180
#define LCD_DIS_CHINA_ROT  0

#define LCD_COLUMN_NUMBER 128
#define LCD_LINE_NUMBER 64

	#if (LCD_DIS_CHINA_ROT == 180) 
	#define LCD_COLUMN_OFFSET 4					//旋转180度需要加4个偏移量
	#else 
	#define LCD_COLUMN_OFFSET 0
	#endif

#define LCD_PAGE_NUMBER (LCD_LINE_NUMBER/8)
#define LCD_COMMAND_NUMBER  13
#define SPI_SCK_0   HAL_GPIO_WritePin(GPIOB, SCL_Pin, GPIO_PIN_RESET);// 设置sck接口到PB5   清零
#define SPI_SCK_1   HAL_GPIO_WritePin(GPIOB, SCL_Pin, GPIO_PIN_SET);      //置位

#define SPI_SDA_0   HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_RESET);       // 设置SDA接口到PB6
#define SPI_SDA_1   HAL_GPIO_WritePin(GPIOB, SDA_Pin, GPIO_PIN_SET);

#define SPI_FSO  	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);		//字库芯片数据输出脚到PB7

#define SPI_RST_0   HAL_GPIO_WritePin(GPIOB, RST_Pin, GPIO_PIN_RESET);// 设置RST接口到PB8
#define SPI_RST_1   HAL_GPIO_WritePin(GPIOB, RST_Pin, GPIO_PIN_SET);

#define SPI_DC_0    HAL_GPIO_WritePin(GPIOB, DC_Pin, GPIO_PIN_RESET);      // 设置DC接口到PB9
#define SPI_DC_1    HAL_GPIO_WritePin(GPIOB, DC_Pin, GPIO_PIN_SET);  

#define SPI_CS_0    HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET); // 设置CS接口到PB12
#define SPI_CS_1    HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_SET);

#define SPI_CS2_0   HAL_GPIO_WritePin(GPIOA,CS_F_Pin, GPIO_PIN_RESET);    // 设置CS2  字库芯片 接口到PB13  
#define SPI_CS2_1   HAL_GPIO_WritePin(GPIOA,CS_F_Pin, GPIO_PIN_SET); 

#define BL_0        HAL_GPIO_WritePin(GPIOA, BL_Pin, GPIO_PIN_RESET);   // 设置BL接口到PB14
#define BL_1        HAL_GPIO_WritePin(GPIOA, BL_Pin, GPIO_PIN_SET);

#define LED_1 GPIOC->BSRR=0X2000;
#define LED_0 GPIOC->BRR=0X2000;
//指令表
#define W25X_WriteEnable 0x06
#define W25X_WriteDisable 0x04
#define W25X_ReadStatusReg 0x05
#define W25X_WriteStatusReg 0x01
#define W25X_ReadData 0x03
#define W25X_FastReadData 0x0B
#define W25X_FastReadDual 0x3B
#define W25X_PageProgram 0x02
#define W25X_BlockErase 0xD8
#define W25X_SectorErase 0x20
#define W25X_ChipErase 0xC7
#define W25X_PowerDown 0xB9
#define W25X_ReleasePowerDown 0xAB
#define W25X_DeviceID 0xAB
#define W25X_ManufactDeviceID 0x90
#define W25X_JedecDeviceID 0x9F

//字库基地址
#define CHAR6_12_ADD     0X1000 
#define CHAR7_14_ADD     0X1600 
#define CHAR8_16_ADD     0X1D00 
#define CHAR9_18_ADD     0X2500
#define CHAR10_20_ADD     0X3700
#define CHAR11_22_ADD     0X4B00 
#define CHAR12_24_ADD     0X6100
#define CHAR13_26_ADD     0X7900

#define CHINA12_12_ADD     0X9300 
#define CHINA14_14_ADD     0X39300 
#define CHINA16_16_ADD     0X71300 
#define CHINA18_18_ADD     0XB1300 
#define CHINA20_20_ADD     0X11D300 
#define CHINA22_22_ADD     0X195300
#define CHINA24_24_ADD     0X219300
#define CHINA26_26_ADD     0X2A9300 
#define END_ADD             0X379300


#define TRUE             1
#define FALSE           0
typedef enum        // 不同字体选择
{
     SONG_STYLE12,SONG_STYLE14,SONG_STYLE16,SONG_STYLE18,SONG_STYLE20,SONG_STYLE22,SONG_STYLE24,SONG_STYLE26
}type_of_font;
type_of_font TYPE_OF_STYLE;

typedef enum        // 不同字体选择
{
     NORMAL,REVERSE   
}type_of_dis;
type_of_dis TYPE_OF_DIS;

struct                   //显示字符参数传递结构体
{                
     uint8_t    CHAR_WIDE;           //英文字体宽度       
     uint8_t    CHAR_HIGH;           //英文字体高度
     uint8_t    WORD_WIDE;           //汉字宽度
     uint8_t    WORD_HIGH;           //汉字高度
     uint16_t    CHAR_DATA_SIZE;     //英文一个字符总数据大小  字节
     uint16_t    WORD_DATA_SIZE;     //汉字一个字符总数据大小  字节
     type_of_dis TYPE_OF_DIS;              //字符颜色
     uint16_t   BASE_WORD_ADD;           //汉字字库基地址
     uint16_t   BASE_CHAR_ADD;           //英文字库基地址

} DIS_CHAR_MODE ;
uint8_t  FONT_BUFFER[104];         //字库缓存，支持最大26*26汉字，即4*26字节           
const uint8_t  *point;
uint8_t ACK=0;
uint8_t READ_BACK[32];                    ////一个汉字最大返回32个字节
uint8_t CHAR_DATA[32];
//unsigned char DIS_BUFF[128*8] ;
void init_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
 
 
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|CS_Pin|BL_Pin|CS_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin|DC_Pin|RST_Pin
                          |oled_sck_Pin|oled_sda_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  

  /*Configure GPIO pin : INT_Pin */
 

  /*Configure GPIO pins : SPI_CS_Pin CS_Pin BL_Pin CS_F_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|CS_Pin|BL_Pin|CS_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SCL_Pin SDA_Pin DC_Pin RST_Pin
                           oled_sck_Pin oled_sda_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin|DC_Pin|RST_Pin
                          |oled_sck_Pin|oled_sda_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
}
const uint8_t LCD_init_cmd[LCD_COMMAND_NUMBER]=
{											

    0xe2, //软复位

	0x2c, //升压步聚1
	
	0x2e, //升压步聚2
	
	0x2f, //升压步聚3
	
	0x24, //粗调对比度，可设置范围0x20～0x27
	0x81, //微调对比度
	0x22, //微调对比度的值，可设置范围0x00～0x3f
	0xa2, //1/9 偏压比（bias）
	#if (LCD_DIS_CHINA_ROT == 180) 
	0xA1, //列扫描顺序：从左到右
	0xc0, //行扫描顺序：反序
	#else 
	0xA0, //列扫描顺序：从左到右
	0xc8, //行扫描顺序：反序
	#endif
	0xa6, //正显
	0x40, //起始行：第一行开始
	0xaf, //开显示
};
const uint8_t F_DAT[]= {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xE0,0xF8,0xFE,0x1F,0x0F,0x07,
0x07,0x0F,0x1F,0xFC,0xF8,0xC0,0x00,0x00,
0x00,0xFE,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0xFF,0xFF,0x00,0x00,
0x00,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x07,0x1F,0x7F,0x78,0xF0,0xE0,
0xE0,0xF0,0x7C,0x3F,0x1F,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"0",0*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xC0,0xE0,0xF0,0x7C,0xFE,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0x01,0x00,0x00,0xFF,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"1",1*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xC0,0xF8,0xFC,0x1E,0x0F,0x07,0x07,
0x07,0x0F,0x1F,0xFE,0xFC,0xE0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x80,0xF0,0xFF,0x3F,0x07,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xC0,0xE0,0xF8,
0x7E,0x1F,0x07,0x01,0x00,0x00,0x00,0x00,
0x00,0x80,0xF8,0xFC,0xFF,0xFF,0xF3,0xF0,
0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"2",2*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xF0,0xFC,0x3E,0x0F,0x07,0x07,
0x07,0x07,0x0F,0xFE,0xFC,0xF0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,
0xE0,0xE0,0xF8,0x3F,0x1F,0x03,0x00,0x00,
0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x01,
0x01,0x03,0x07,0xBF,0xFE,0xF8,0x00,0x00,
0x00,0x01,0x0F,0x3F,0x7C,0xF0,0xE0,0xE0,
0xE0,0xF0,0x78,0x7F,0x1F,0x07,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"3",3*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xF0,0xFC,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0xE0,0xFC,0x3F,0x0F,
0x03,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0xE0,0xF8,0xFE,0xDF,0xC3,0xC0,0xC0,0xC0,
0xC0,0xC0,0xFF,0xFF,0xC0,0xC0,0xC0,0x00,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0xFF,0xFF,0x01,0x01,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"4",4*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0xFF,0xFF,0x0F,0x0F,0x0F,
0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,
0x00,0xC0,0xFF,0xFF,0x7B,0x38,0x38,0x3C,
0x38,0x78,0xF8,0xF0,0xE0,0x00,0x00,0x00,
0x00,0x00,0x81,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xC7,0xFF,0xFF,0x00,0x00,
0x00,0x0F,0x3F,0x7C,0xF0,0xE0,0xE0,0xE0,
0xE0,0xF0,0x7C,0x3F,0x1F,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"5",5*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0xF8,
0x7F,0x1F,0x03,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0xF0,0xFC,0xFF,0x7F,0x71,
0x78,0x78,0x70,0xF0,0xE0,0xC0,0x00,0x00,
0x00,0xFC,0xFF,0xFF,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,
0x00,0x01,0x1F,0x3F,0x7C,0xF0,0xE0,0xE0,
0xE0,0xE0,0xF0,0x78,0x7F,0x1F,0x07,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"6",6*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
0x0F,0x0F,0x0F,0xEF,0xFF,0x7F,0x0F,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC0,0xF8,0x7F,0x0F,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFE,
0x7F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xC0,0xFE,0xFF,0x1F,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"7",7*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xF8,0xFC,0x1E,0x0F,0x07,0x07,
0x07,0x07,0x1F,0xFE,0xFC,0xE0,0x00,0x00,
0x00,0x00,0x1F,0xBF,0xF8,0xF0,0xE0,0xE0,
0xE0,0xF0,0xF8,0x3F,0x1F,0x03,0x00,0x00,
0x00,0xF8,0xFE,0x3F,0x07,0x03,0x01,0x01,
0x01,0x03,0x07,0x0F,0xFF,0xFC,0x00,0x00,
0x00,0x0F,0x3F,0x7F,0xF0,0xF0,0xE0,0xE0,
0xE0,0xF0,0xF0,0x7E,0x3F,0x0F,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"8",8*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xE0,0xF8,0xFE,0x1F,0x0F,0x07,0x07,
0x07,0x0F,0x1F,0xFE,0xF8,0xE0,0x00,0x00,
0x00,0xFF,0xFF,0xE0,0x80,0x00,0x00,0x00,
0x00,0x00,0xC0,0xFF,0xFF,0x3F,0x00,0x00,
0x00,0x00,0x03,0x07,0x0F,0x0F,0x0E,0x8E,
0xFF,0xFF,0x7F,0x0F,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0xE0,0xFC,0x7F,
0x0F,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"9",9*/
};
const uint8_t  picture_tab[]={
/*------------------------------------------------------------------------------
;  列行式，低位在前，阴码
;  宽×高（像素）: 128×64
------------------------------------------------------------------------------*/
    0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x20,0x44,0x08,0x00,0x18,0x48,0x28,0xC8,0x08,0x28,0x48,0x18,0x00,
0x40,0x40,0xFC,0x40,0x40,0xFC,0x00,0x00,0xF8,0x00,0x00,0xFC,0x00,0x40,0x40,0xA0,
0x90,0x88,0x84,0x88,0x90,0x20,0x40,0x40,0x00,0x00,0x40,0x44,0xD8,0x20,0xF0,0xAC,
0xA8,0xE8,0xB8,0xA8,0xE0,0x00,0x00,0x00,0xC0,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,
0x7C,0x40,0x40,0x00,0x00,0xF0,0x90,0x90,0x90,0xFC,0x90,0x90,0x90,0xF0,0x00,0x00,
0x00,0x80,0x88,0x88,0x88,0x88,0x88,0xE8,0xA8,0x98,0x8C,0x88,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x04,0x3E,0x01,0x10,0x11,0x09,0x05,0x3F,0x05,0x09,0x11,0x11,0x00,
0x08,0x18,0x0F,0x24,0x14,0x0F,0x00,0x00,0x0F,0x00,0x00,0x3F,0x00,0x20,0x22,0x2A,
0x32,0x22,0x3F,0x22,0x32,0x2A,0x22,0x20,0x00,0x00,0x20,0x10,0x0F,0x10,0x28,0x24,
0x23,0x20,0x2F,0x28,0x2A,0x2C,0x00,0x30,0x0F,0x04,0x3D,0x25,0x15,0x15,0x0D,0x15,
0x2D,0x24,0x24,0x00,0x00,0x07,0x04,0x04,0x04,0x1F,0x24,0x24,0x24,0x27,0x20,0x38,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x81,0x41,0x21,0x21,0x61,0x01,0x01,0x21,0xE1,0xE1,0x01,0xE1,0xE1,
0x21,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x21,0xE1,0x21,0x21,0x21,0x61,0x01,0x01,
0x21,0x21,0xE1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0xC1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x21,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x0F,0x10,0x20,0x24,0x1C,0x04,0x00,0x20,0x3F,0x01,0x3E,0x01,0x3F,
0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x22,0x22,0x27,0x30,0x00,0x00,
0x20,0x20,0x3F,0x20,0x20,0x00,0x00,0x1E,0x25,0x25,0x25,0x16,0x00,0x00,0x1E,0x21,
0x21,0x21,0x13,0x00,0x01,0x01,0x1F,0x21,0x21,0x00,0x00,0x00,0x21,0x3F,0x22,0x21,
0x01,0x00,0x00,0x1E,0x21,0x21,0x21,0x1E,0x00,0x21,0x3F,0x22,0x01,0x01,0x3E,0x20,
0x00,0x21,0x21,0x3F,0x20,0x20,0x00,0x00,0x1E,0x21,0x21,0x21,0x13,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xF0,0x08,0x04,0x04,0x04,0x0C,0x00,0xF0,0x08,0x04,0x04,0x08,0xF0,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0x04,0x00,
0x00,0x00,0x00,0x00,0x0C,0x04,0xFC,0x04,0x0C,0x00,0x04,0xFC,0x04,0x04,0x08,0xF0,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x81,0x82,0x84,0x84,0x84,0x82,0x80,0x81,0x82,0x84,0x84,0x82,0x81,
0x80,0x80,0x86,0x86,0x80,0x80,0x80,0x80,0x80,0x85,0x83,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x84,0x87,0x84,0x84,
0x84,0x86,0x80,0x80,0x80,0x84,0x87,0x84,0x80,0x80,0x84,0x87,0x84,0x84,0x82,0x81,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF
};
void delay_us(uint32_t  _us_time)
{       
  uint8_t x=0;
  for(;_us_time>0;_us_time--)
  {
    x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;
	  x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;x++;
  }
}
void delay_ms(uint32_t _ms_time)
  {
    uint32_t i,j;
    for(i=0;i<_ms_time;i++)
    {
    for(j=0;j<900;j++)
      {;}
    }
  }
void SPI_SendByte_w(uint8_t  byte)				//向SPI接口写一个8位数据
{ 
  uint8_t counter;   
  for(counter=0;counter<8;counter++)
  { 
    SPI_SCK_0;	  
    if((byte&0x80)==0)
    {
      SPI_SDA_0;
    }
    else SPI_SDA_1;
    byte=byte<<1;	
    SPI_SCK_1;			
  }
  
	SPI_SCK_0;
}

void LCD_send_cmd(uint8_t o_command)
  {
    SPI_DC_0;
    SPI_CS_0;
    SPI_SendByte_w(o_command);
    SPI_CS_1;
   
    //SPI_DC_1;
  }
void LCD_send_data(uint8_t o_data)
  { 
    SPI_DC_1;
    SPI_CS_0;
    SPI_SendByte_w(o_data);
    SPI_CS_1;
    
   }
uint8_t ReadByte(void)        //从字库中读数据函数
{
	uint8_t i,n;
	uint8_t dat=0;
	
	SPI_SCK_1;
	for(i=0;i<8;i++)
	{
		SPI_SCK_0;
		dat=dat<<1;
		n = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
		 if(n == GPIO_PIN_SET)  
			dat=dat|0x01;
		else 
			dat&=0xfe;
		SPI_SCK_1	;		
	}	
	
	return dat;
}
void Column_set(uint8_t column)
  {
	column+=LCD_COLUMN_OFFSET;
    LCD_send_cmd(0x10|(column>>4));    //设置列地址高位
    LCD_send_cmd(0x00|(column&0x0f));   //设置列地址低位  
    	 
  }

void Page_set(uint8_t page)
  {
    LCD_send_cmd(0xb0+(page&0X07));
  }
void LCD_clear(void)
  {
    uint8_t page,column;
    for(page=0;page<LCD_PAGE_NUMBER;page++)             //page loop
      { 
          Page_set(page);
          Column_set(0);	  
          for(column=0;column<LCD_COLUMN_NUMBER;column++)	//column loop
            {
              LCD_send_data(0x00);
            }
      }
  }
void LCD_full(void)
  {
    unsigned char page,column;
    for(page=0;page<LCD_PAGE_NUMBER;page++)             //page loop
      { 
        Page_set(page);
        Column_set(0);	  
	for(column=0;column<LCD_COLUMN_NUMBER;column++)	//column loop
          {
            LCD_send_data(0xff);
          }
      }
  }
void LCD_init(void)
  {
    unsigned char i;
    for(i=0;i<LCD_COMMAND_NUMBER;i++)
      {
        LCD_send_cmd(LCD_init_cmd[i]);
      }
  }

void Picture_display(const unsigned char *ptr_pic)
  {
    unsigned char page,column;
    for(page=0;page<(LCD_LINE_NUMBER/8);page++)        //page loop
      { 
	Page_set(page);
	Column_set(0);	  
	for(column=0;column<LCD_COLUMN_NUMBER;column++)	//column loop
          {
            LCD_send_data(*ptr_pic++);
          }
      }
  }
void Picture_ReverseDisplay(const unsigned char *ptr_pic)
{
    unsigned char page,column,data;
    for(page=0;page<(LCD_LINE_NUMBER/8);page++)        //page loop
      { 
	     Page_set(page);
	     Column_set(0);	  
	    for(column=0;column<LCD_COLUMN_NUMBER;column++)	//column loop
          {
            data=*ptr_pic++;
            data=data;
            LCD_send_data(data);
          }
      }
  }
/*void OLED_32X48(uint8_t x,uint8_t y,uint8_t n)
{
	uint8_t wm = 0,i;
	uint32_t adder = 96*n;
	OLED_set_pos(0,0);	
	for(i=0;i<6;i++)
	{
		OLED_set_pos(x,y);	
	for(wm = 0;wm<16;wm++)
		 {
			 OLED_write_dat(F32x48[adder]);  
			 adder += 1;
		 }
	 y++;
	 }
}
 */ 
  
void Display_no(uint8_t x,uint8_t y,uint8_t n)  //////////////////////////////////////////
{
    unsigned char page,column,data;
	uint32_t adder = 96*n;
    for(page=0;page<6;page++)        //page loop
      { 
	     Page_set(y);
	     Column_set(x);	  
	    for(column=0;column<16;column++)	//column loop
          {
            data=F_DAT[adder];
            data=data;
            LCD_send_data(~data);
			 adder += 1;
          }
	   y++;
      }
  }
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void W25QXX_Read(unsigned char *pBuffer, unsigned int ReadAddr, unsigned short int NumByteToRead)
{
	unsigned short int i,n;
    unsigned char counter,redata=0;
	SPI_CS2_0;					   //使能器件
	SPI_SendByte(W25X_ReadData);//发送读取命令		   
	SPI_SendByte((unsigned char)(ReadAddr >> 16));    //发送24bit地址
    SPI_SendByte((unsigned char)(ReadAddr >> 8));    //发送24bit地址
    SPI_SendByte((unsigned char)(ReadAddr));    //发送24bit地址
	for (i = 0; i < NumByteToRead; i++)         //循环读数
	{           
      for(counter=0;counter<8;counter++)
      { 
            SPI_SCK_0;	  
            SPI_SDA_1;
            redata <<=1;
         	n = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11);
		   if(n == GPIO_PIN_SET)   //引脚设置为读
		   {
              redata |=0x01; 
           }	
            SPI_SCK_1;			
      }
      
        SPI_SCK_0;
        pBuffer[i] = redata;
	}
	SPI_CS2_1;
}
unsigned char CHECK_FALSH(void)
{
    unsigned int x=0;
    const unsigned char string[] = "JYC-4MbByte-FONT-FLASH";
    W25QXX_Read(FONT_BUFFER, 0X000000, 22);
    for(x=0;x<22;x++)
    {
       if(FONT_BUFFER[x] != string[x]) 
       {
           return(FALSE);
       } 
    }
    return(TRUE);
}
void SET_FONT_STYLE (type_of_font TYPE_CHAR,type_of_dis DIS_TYPE)  
{
	if(DIS_TYPE != NORMAL)
	{
		DIS_CHAR_MODE.TYPE_OF_DIS = REVERSE;
	}
	else
	{
		DIS_CHAR_MODE.TYPE_OF_DIS = NORMAL;
	}
    switch (TYPE_CHAR)
    {
        case SONG_STYLE12: 
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR6_12_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA12_12_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 1*12;
                DIS_CHAR_MODE.CHAR_HIGH = 12;
                DIS_CHAR_MODE.CHAR_WIDE = 6;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 2*12;
                DIS_CHAR_MODE.WORD_HIGH = 12;
                DIS_CHAR_MODE.WORD_WIDE = 12;
				break;
        
        case SONG_STYLE14:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR7_14_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA14_14_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 1*14;
                DIS_CHAR_MODE.CHAR_HIGH = 14;
                DIS_CHAR_MODE.CHAR_WIDE = 7;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 2*14;
                DIS_CHAR_MODE.WORD_HIGH = 14;
                DIS_CHAR_MODE.WORD_WIDE = 14;
            break;
        case SONG_STYLE16:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR8_16_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA16_16_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 1*16;
                DIS_CHAR_MODE.CHAR_HIGH = 16;
                DIS_CHAR_MODE.CHAR_WIDE = 8;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 2*16;
                DIS_CHAR_MODE.WORD_HIGH = 16;
                DIS_CHAR_MODE.WORD_WIDE = 16;
            break;
        case SONG_STYLE18:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR9_18_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA18_18_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 2*18;
                DIS_CHAR_MODE.CHAR_HIGH = 18;
                DIS_CHAR_MODE.CHAR_WIDE = 9;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 3*18;
                DIS_CHAR_MODE.WORD_HIGH = 18;
                DIS_CHAR_MODE.WORD_WIDE = 18;
            break;
        case SONG_STYLE20:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR10_20_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA20_20_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 2*20;
                DIS_CHAR_MODE.CHAR_HIGH = 20;
                DIS_CHAR_MODE.CHAR_WIDE = 10;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 3*20;
                DIS_CHAR_MODE.WORD_HIGH = 20;
                DIS_CHAR_MODE.WORD_WIDE = 20;
            break;
        case SONG_STYLE22:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR11_22_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA22_22_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 2*22;
                DIS_CHAR_MODE.CHAR_HIGH = 22;
                DIS_CHAR_MODE.CHAR_WIDE = 11;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 3*22;
                DIS_CHAR_MODE.WORD_HIGH = 22;
                DIS_CHAR_MODE.WORD_WIDE = 22;
            break;
        case SONG_STYLE24:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR12_24_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA24_24_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 2*24;
                DIS_CHAR_MODE.CHAR_HIGH = 24;
                DIS_CHAR_MODE.CHAR_WIDE = 12;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 3*24;
                DIS_CHAR_MODE.WORD_HIGH = 24;
                DIS_CHAR_MODE.WORD_WIDE = 24;
            break;
        case SONG_STYLE26:
                DIS_CHAR_MODE.BASE_CHAR_ADD = CHAR13_26_ADD;
                DIS_CHAR_MODE.BASE_WORD_ADD = CHINA26_26_ADD;
                DIS_CHAR_MODE.CHAR_DATA_SIZE = 2*26;
                DIS_CHAR_MODE.CHAR_HIGH = 26;
                DIS_CHAR_MODE.CHAR_WIDE = 13;
                DIS_CHAR_MODE.WORD_DATA_SIZE = 4*26;
                DIS_CHAR_MODE.WORD_HIGH = 26;
                DIS_CHAR_MODE.WORD_WIDE = 26;
            break;
    }
    
}
void DIS_CHINESE(unsigned short int x_start,unsigned short int y_start,char *string)      //显示字符串，支持中英混显/GB2312编码
{
    unsigned char CACHE=0,CACHE_FONT[4*32];
    unsigned int Address,x=0,y=0,z=0,m,n,f;
    char  WORD_CODE_MSB,WORD_CODE_LSB;
    unsigned int ADD_X_START = x_start, \
                 ADD_Y_START = y_start,  \
                 ADD_X_END = x_start + DIS_CHAR_MODE.WORD_WIDE-1,  \
                 ADD_Y_END = y_start + DIS_CHAR_MODE.WORD_HIGH;
    

/*******************************************/
   while(*string!='\0')
    { 
        WORD_CODE_MSB = *string++;
        WORD_CODE_LSB = *string++;
        for(n=0;n<(4*32);n++)            
        {    
			FONT_BUFFER[n] = 0; //  清空字库缓存
		}
        if(((unsigned char)WORD_CODE_MSB>=0xA1) &&  ((unsigned char)WORD_CODE_LSB >=0xA1))            //GB2312编码范围,序列号1410  为：啊 后续为：阿埃挨暗   
        {
            Address =((WORD_CODE_MSB - 0xA1) * 94 + (WORD_CODE_LSB - 0xA1))*(DIS_CHAR_MODE.WORD_DATA_SIZE)+ DIS_CHAR_MODE.BASE_WORD_ADD ;
            W25QXX_Read(FONT_BUFFER, Address, (DIS_CHAR_MODE.WORD_DATA_SIZE));            
            ADD_X_END = ADD_X_START + DIS_CHAR_MODE.WORD_WIDE-1;
			
/*******************************地址设定************************************///横向显示

            if((ADD_X_END>(LCD_COLUMN_NUMBER-1)) )          //超出x地址范围,转到下一页
            {                                           
                 ADD_Y_START = ADD_Y_START+DIS_CHAR_MODE.WORD_HIGH/8;
                 ADD_X_START = 0;//((ADD_X_END % TFT_COLUMN_NUMBER) / DIS_CHAR_MODE.WORD_WIDE ) *DIS_CHAR_MODE.WORD_WIDE + DIS_CHAR_MODE.WORD_WIDE;
                 ADD_X_END = DIS_CHAR_MODE.WORD_WIDE-1;
				 ADD_Y_END = ADD_Y_START + DIS_CHAR_MODE.WORD_HIGH/8;
                 if (ADD_Y_END > LCD_PAGE_NUMBER )       //超出Y范围
                 {
                    ADD_Y_START = 0;                          //移动到第一行
                        
                 }
            }

/************************************************显示*************************************************************/              
            
			x = DIS_CHAR_MODE.WORD_DATA_SIZE / DIS_CHAR_MODE.WORD_HIGH;
			f = DIS_CHAR_MODE.WORD_DATA_SIZE / DIS_CHAR_MODE.WORD_WIDE *8;
            for (m=0;m<f ;m++)      //按行处理显示数据
            {   
                    for(n=0;n<x;n++)            //  取完一行数
                    {    
						CACHE = FONT_BUFFER[n + x*m];
						for(z=0;z<8;z++)
						{	
							y = m/8 * DIS_CHAR_MODE.WORD_WIDE+ n*8+z;
							CACHE_FONT[y]=((CACHE_FONT[y]>>1)&0X7F)    \
							| (CACHE&0X80);
							CACHE <<=1;
						}                            
                    }
            }
			x = DIS_CHAR_MODE.WORD_DATA_SIZE / DIS_CHAR_MODE.WORD_WIDE;
			for(m=0;m<x;m++)
			{
				Column_set(ADD_X_START);
				Page_set(ADD_Y_START+m);
				for(n=0;n<DIS_CHAR_MODE.WORD_WIDE;n++)  
				{
					if(DIS_CHAR_MODE.TYPE_OF_DIS == NORMAL)
					{
						LCD_send_data(CACHE_FONT[m * DIS_CHAR_MODE.WORD_WIDE+ n]); 
					}
					else
					{
						LCD_send_data(~CACHE_FONT[m * DIS_CHAR_MODE.WORD_WIDE+ n]);
					}
				}
			}
			
			ADD_X_START += DIS_CHAR_MODE.WORD_WIDE-1;			
        }
        else    //英文范围
        {           

            Address = (WORD_CODE_MSB ) * DIS_CHAR_MODE.CHAR_DATA_SIZE + DIS_CHAR_MODE.BASE_CHAR_ADD; 
            string--;
            ADD_X_END = ADD_X_START + DIS_CHAR_MODE.CHAR_WIDE-1;             
            W25QXX_Read(FONT_BUFFER, Address, (DIS_CHAR_MODE.CHAR_DATA_SIZE)); 

 /*******************************地址设定************************************/
                
             //判断地址是否合法
                if((ADD_X_END>(LCD_COLUMN_NUMBER-1)) )          //超出x地址范围,转到下一行
                {                                           
                    ADD_Y_START = ADD_Y_START+ DIS_CHAR_MODE.CHAR_HIGH/8;
                    ADD_X_START = 0;//((ADD_X_END % TFT_COLUMN_NUMBER) / DIS_CHAR_MODE.WORD_WIDE ) *DIS_CHAR_MODE.WORD_WIDE + DIS_CHAR_MODE.WORD_WIDE;
                    ADD_X_END = DIS_CHAR_MODE.CHAR_WIDE-1;            
                    ADD_Y_END = ADD_Y_START + DIS_CHAR_MODE.CHAR_HIGH/8;
                    if (ADD_Y_END > LCD_PAGE_NUMBER )       //超出Y范围
					 {
						ADD_Y_START = 0;                          //移动到第一行
							
					 }
                    
                }
           
///*************************************************************************************************************/      
			x = DIS_CHAR_MODE.CHAR_DATA_SIZE / DIS_CHAR_MODE.CHAR_HIGH;
			f = DIS_CHAR_MODE.CHAR_DATA_SIZE / DIS_CHAR_MODE.CHAR_WIDE *8;
            for (m=0;m<f ;m++)      //按行处理显示数据
            {   
                    for(n=0;n<x;n++)            //  取完一行数
                    {    
						CACHE = FONT_BUFFER[n + x*m];
						for(z=0;z<8;z++)
						{	
							y = m/8 * DIS_CHAR_MODE.CHAR_WIDE+ n*8+z;
							CACHE_FONT[y]=((CACHE_FONT[y]>>1)&0X7F)    \
							| (CACHE&0X80);
							CACHE <<=1;
						}                            
                    }
            }
			x = DIS_CHAR_MODE.CHAR_DATA_SIZE / DIS_CHAR_MODE.CHAR_WIDE;
			for(m=0;m<x;m++)
			{
				Column_set(ADD_X_START);
				Page_set(ADD_Y_START+m);
				for(n=0;n<DIS_CHAR_MODE.CHAR_WIDE;n++)  
				{
					if(DIS_CHAR_MODE.TYPE_OF_DIS == NORMAL)
					{
						LCD_send_data(CACHE_FONT[m * DIS_CHAR_MODE.CHAR_WIDE+ n]) ;
					}
					else
					{
						LCD_send_data(~CACHE_FONT[m * DIS_CHAR_MODE.CHAR_WIDE+ n]) ;
					}
					
				}
			}
            ADD_X_START = ADD_X_END;        
        }
    }            
}







